	cpu LMM
	.module main.c
	.area lit(rom, con, rel)
_QF_active::
	.word 0
	.word 0
	.byte 0
	.word _l_oper
	.word 0
	.byte 0
	.word _l_bomb
	.word _l_bombQueue
	.byte 1
	.dbfile ./main.c
	.dbsym e QF_active _QF_active A[15:3]X
_QF_activeNum::
	.byte 2
	.dbsym e QF_activeNum _QF_activeNum X
	.area text(rom, con, rel)
	.dbfile ./main.c
	.dbfunc e main _main fV
_main::
	.dbline -1
	.dbline 47
; /*****************************************************************************
; * Time Bomb example (FSM)
; * Last Updated for Version: 1.5.00
; * Date of the Last Update:  Sep 17, 2006
; *
; * Copyright (C) 2002-2006 Quantum Leaps, LLC. All rights reserved.
; *
; * This software may be distributed and modified under the terms of the GNU
; * General Public License version 2 (GPL) as published by the Free Software
; * Foundation and appearing in the file GPL.TXT included in the packaging of
; * this file. Please note that GPL Section 2[b] requires that all works based
; * on this software must also be made publicly available under the terms of
; * the GPL ("Copyleft").
; *
; * Alternatively, this software may be distributed and modified under the
; * terms of Quantum Leaps commercial licenses, which expressly allow the
; * licensees to retain the proprietary status of their code. The licensees
; * who use this software under one of Quantum Leaps commercial licenses do
; * not use this software under the GPL and therefore are not subject to any
; * of its terms.
; *
; * Contact information:
; * Quantum Leaps Web site:  http://www.quantum-leaps.com
; * Quantum Leaps licensing: http://www.quantum-leaps.com/licensing
; * Quantum Leaps products:  http://www.quantum-leaps.com/products
; * e-mail:                  sales@quantum-leaps.com
; *****************************************************************************/
; #include "qpn_port.h"
; #include "bsp.h"
; #include "bomb.h"
; 
; static Bomb   l_bomb;
; static QEvent l_bombQueue[1];
; 
; static Oper   l_oper;
; /* no queue buffer */
; 
; /*..........................................................................*/
; QActiveCB const Q_ROM QF_active[] = {
;     { (QActive *)0,       (QEvent *)0, 0                  },      /* unused */
;     { (QActive *)&l_oper, (QEvent *)0, 0                  },   /* OPER_PRIO */
;     { (QActive *)&l_bomb, l_bombQueue, Q_DIM(l_bombQueue) }    /* BOMB_PRIO */
; };
; uint8_t const Q_ROM QF_activeNum = Q_DIM(QF_active) - 1;   /* number of AOs */
; 
; /*..........................................................................*/
; void main (void) {
	.dbline 48
;     BSP_init();                                     /* initialize the board */
	xcall _BSP_init
	.dbline 50
; 
;     Oper_ctor(&l_oper, 4);           /* instantiate with freq of ramps [Hz] */
	mov A,4
	push A
	mov A,>_l_oper
	push A
	mov A,<_l_oper
	push A
	xcall _Oper_ctor
	.dbline 51
;     Bomb_ctor(&l_bomb, 5);             /* instantiate with timeout in [sec] */
	mov A,5
	push A
	mov A,>_l_bomb
	push A
	mov A,<_l_bomb
	push A
	xcall _Bomb_ctor
	add SP,-6
	.dbline 53
; 
;     QF_run();                                /* transfer control to QF-nano */
	xcall _QF_run
	.dbline -2
	.dbline 54
; }
L1:
	.dbline 0 ; func end
	jmp .
	.dbend
	.area data(ram, con, rel)
	.dbfile ./main.c
_l_oper:
	.word 0,0,0,0,0
	.byte 0,0,0
	.dbsym s l_oper _l_oper X
	.area data(ram, con, rel)
	.dbfile ./main.c
_l_bombQueue:
	.byte 0,0
	.dbsym s l_bombQueue _l_bombQueue A[2:1]X
	.area data(ram, con, rel)
	.dbfile ./main.c
_l_bomb:
	.word 0,0,0,0,0
	.byte 0,0,0
	.dbsym s l_bomb _l_bomb X
