<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [D:\qp\qpn\examples\arm-cortex\keil\dpp-ev-lm3s811\dpp.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image D:\qp\qpn\examples\arm-cortex\keil\dpp-ev-lm3s811\dpp.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 69]: Last Updated: Tue Jun 25 09:44:54 2013
<BR><P>
<H3>Maximum Stack Usage =         96 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Table_serving &rArr; BSP_displayPhilStat &rArr; Display96x16x1StringDraw &rArr; Display96x16x1WriteArray &rArr; SysCtlDelay
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[e]">Reset_Handler</a>
 <LI><a href="#[1]">NmiSR</a>
 <LI><a href="#[2]">FaultISR</a>
 <LI><a href="#[3]">IntDefaultHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NmiSR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NmiSR</a><BR>
 <LI><a href="#[2]">FaultISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">FaultISR</a><BR>
 <LI><a href="#[3]">IntDefaultHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">IntDefaultHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2]">FaultISR</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3]">IntDefaultHandler</a> from startup_keil.o(RESET) referenced 37 times from startup_keil.o(RESET)
 <LI><a href="#[1]">NmiSR</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[8]">Philo_eating</a> from philo.o(i.Philo_eating) referenced from philo.o(i.Philo_hungry)
 <LI><a href="#[9]">Philo_hungry</a> from philo.o(i.Philo_hungry) referenced from philo.o(i.Philo_thinking)
 <LI><a href="#[6]">Philo_initial</a> from philo.o(i.Philo_initial) referenced from philo.o(i.Philo_ctor)
 <LI><a href="#[7]">Philo_thinking</a> from philo.o(i.Philo_thinking) referenced from philo.o(i.Philo_eating)
 <LI><a href="#[7]">Philo_thinking</a> from philo.o(i.Philo_thinking) referenced from philo.o(i.Philo_initial)
 <LI><a href="#[5]">QHsm_top</a> from qepn.o(i.QHsm_top) referenced from philo.o(i.Philo_ctor)
 <LI><a href="#[5]">QHsm_top</a> from qepn.o(i.QHsm_top) referenced from philo.o(i.Philo_eating)
 <LI><a href="#[5]">QHsm_top</a> from qepn.o(i.QHsm_top) referenced from philo.o(i.Philo_hungry)
 <LI><a href="#[5]">QHsm_top</a> from qepn.o(i.QHsm_top) referenced from philo.o(i.Philo_thinking)
 <LI><a href="#[5]">QHsm_top</a> from qepn.o(i.QHsm_top) referenced from qepn.o(i.QHsm_init)
 <LI><a href="#[5]">QHsm_top</a> from qepn.o(i.QHsm_top) referenced from table.o(i.Table_active)
 <LI><a href="#[5]">QHsm_top</a> from qepn.o(i.QHsm_top) referenced from table.o(i.Table_ctor)
 <LI><a href="#[e]">Reset_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[c]">Table_active</a> from table.o(i.Table_active) referenced from table.o(i.Table_paused)
 <LI><a href="#[c]">Table_active</a> from table.o(i.Table_active) referenced from table.o(i.Table_serving)
 <LI><a href="#[a]">Table_initial</a> from table.o(i.Table_initial) referenced from table.o(i.Table_ctor)
 <LI><a href="#[d]">Table_paused</a> from table.o(i.Table_paused) referenced from table.o(i.Table_serving)
 <LI><a href="#[b]">Table_serving</a> from table.o(i.Table_serving) referenced from table.o(i.Table_initial)
 <LI><a href="#[b]">Table_serving</a> from table.o(i.Table_serving) referenced from table.o(i.Table_paused)
 <LI><a href="#[4]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[e]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[2d]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[10]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[12]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2f]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[30]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[31]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[32]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[11]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[33]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[13]"></a>BSP_displayPaused</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bsp.o(i.BSP_displayPaused))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_displayPaused &rArr; Display96x16x1StringDraw &rArr; Display96x16x1WriteArray &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_paused
</UL>

<P><STRONG><a name="[15]"></a>BSP_displayPhilStat</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, bsp.o(i.BSP_displayPhilStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_displayPhilStat &rArr; Display96x16x1StringDraw &rArr; Display96x16x1WriteArray &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDraw
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_serving
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_paused
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_initial
</UL>

<P><STRONG><a name="[16]"></a>BSP_init</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bsp.o(i.BSP_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_init &rArr; Display96x16x1Init &rArr; Display96x16x1Clear &rArr; Display96x16x1WriteArray &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDraw
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>BSP_random</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(i.BSP_random))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_thinking
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_eating
</UL>

<P><STRONG><a name="[20]"></a>BSP_randomSeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp.o(i.BSP_randomSeed))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_ctor
</UL>

<P><STRONG><a name="[2b]"></a>BSP_terminate</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bsp.o(i.BSP_terminate))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_active
</UL>

<P><STRONG><a name="[19]"></a>Display96x16x1Clear</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, display96x16x1.o(i.Display96x16x1Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display96x16x1Clear &rArr; Display96x16x1WriteArray &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFirst
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFinal
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteByte
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
</UL>

<P><STRONG><a name="[18]"></a>Display96x16x1Init</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, display96x16x1.o(i.Display96x16x1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Display96x16x1Init &rArr; Display96x16x1Clear &rArr; Display96x16x1WriteArray &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Clear
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFirst
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFinal
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_init
</UL>

<P><STRONG><a name="[14]"></a>Display96x16x1StringDraw</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, display96x16x1.o(i.Display96x16x1StringDraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Display96x16x1StringDraw &rArr; Display96x16x1WriteArray &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFirst
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFinal
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteByte
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteArray
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_init
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_displayPhilStat
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_displayPaused
</UL>

<P><STRONG><a name="[1f]"></a>Philo_ctor</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, philo.o(i.Philo_ctor))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_randomSeed
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[22]"></a>QActive_arm</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, qfn.o(i.QActive_arm))
<BR><BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_thinking
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_eating
</UL>

<P><STRONG><a name="[23]"></a>QActive_post</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, qfn.o(i.QActive_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = QActive_post
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_serving
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_hungry
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_eating
</UL>

<P><STRONG><a name="[2a]"></a>QF_onIdle</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, bsp.o(i.QF_onIdle))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[25]"></a>QF_onStartup</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, bsp.o(i.QF_onStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QF_onStartup
</UL>
<BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[27]"></a>QF_run</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, qfn.o(i.QF_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QF_run &rArr; QHsm_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onIdle
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29]"></a>QHsm_dispatch</STRONG> (Thumb, 462 bytes, Stack size 56 bytes, qepn.o(i.QHsm_dispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = QHsm_dispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[28]"></a>QHsm_init</STRONG> (Thumb, 142 bytes, Stack size 48 bytes, qepn.o(i.QHsm_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = QHsm_init
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[5]"></a>QHsm_top</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, qepn.o(i.QHsm_top))
<BR>[Address Reference Count : 7]<UL><LI> table.o(i.Table_active)
<LI> table.o(i.Table_ctor)
<LI> philo.o(i.Philo_ctor)
<LI> philo.o(i.Philo_eating)
<LI> philo.o(i.Philo_hungry)
<LI> philo.o(i.Philo_thinking)
<LI> qepn.o(i.QHsm_init)
</UL>
<P><STRONG><a name="[24]"></a>Q_onAssert</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp.o(i.Q_onAssert))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_init
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QHsm_dispatch
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_serving
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_paused
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_active
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_thinking
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_hungry
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_eating
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
</UL>

<P><STRONG><a name="[17]"></a>SystemInit</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, system_lm3s.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_init
</UL>

<P><STRONG><a name="[2c]"></a>Table_ctor</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, table.o(i.Table_ctor))
<BR><BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[35]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[36]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4]"></a>main</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = main &rArr; BSP_init &rArr; Display96x16x1Init &rArr; Display96x16x1Clear &rArr; Display96x16x1WriteArray &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Table_ctor
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_run
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Philo_ctor
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1]"></a>NmiSR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NmiSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>FaultISR</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FaultISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>IntDefaultHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDefaultHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>NVIC_SetPriority</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QF_onStartup
</UL>

<P><STRONG><a name="[1b]"></a>Display96x16x1WriteArray</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, display96x16x1.o(i.Display96x16x1WriteArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Display96x16x1WriteArray &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Clear
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDraw
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
</UL>

<P><STRONG><a name="[1c]"></a>Display96x16x1WriteByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, display96x16x1.o(i.Display96x16x1WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display96x16x1WriteByte &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Clear
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDraw
</UL>

<P><STRONG><a name="[1d]"></a>Display96x16x1WriteFinal</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, display96x16x1.o(i.Display96x16x1WriteFinal))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Display96x16x1WriteFinal &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Clear
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDraw
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
</UL>

<P><STRONG><a name="[1a]"></a>Display96x16x1WriteFirst</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, display96x16x1.o(i.Display96x16x1WriteFirst))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Clear
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1StringDraw
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
</UL>

<P><STRONG><a name="[1e]"></a>SysCtlDelay</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, display96x16x1.o(i.SysCtlDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteFinal
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteByte
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1WriteArray
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display96x16x1Init
</UL>

<P><STRONG><a name="[8]"></a>Philo_eating</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, philo.o(i.Philo_eating))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Philo_eating &rArr; QActive_post
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_arm
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_random
</UL>
<BR>[Address Reference Count : 1]<UL><LI> philo.o(i.Philo_hungry)
</UL>
<P><STRONG><a name="[9]"></a>Philo_hungry</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, philo.o(i.Philo_hungry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Philo_hungry &rArr; QActive_post
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> philo.o(i.Philo_thinking)
</UL>
<P><STRONG><a name="[6]"></a>Philo_initial</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, philo.o(i.Philo_initial))
<BR>[Address Reference Count : 1]<UL><LI> philo.o(i.Philo_ctor)
</UL>
<P><STRONG><a name="[7]"></a>Philo_thinking</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, philo.o(i.Philo_thinking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Philo_thinking
</UL>
<BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_arm
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_random
</UL>
<BR>[Address Reference Count : 2]<UL><LI> philo.o(i.Philo_eating)
<LI> philo.o(i.Philo_initial)
</UL>
<P><STRONG><a name="[c]"></a>Table_active</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, table.o(i.Table_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Table_active
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_terminate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> table.o(i.Table_paused)
<LI> table.o(i.Table_serving)
</UL>
<P><STRONG><a name="[a]"></a>Table_initial</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, table.o(i.Table_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Table_initial &rArr; BSP_displayPhilStat &rArr; Display96x16x1StringDraw &rArr; Display96x16x1WriteArray &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_displayPhilStat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> table.o(i.Table_ctor)
</UL>
<P><STRONG><a name="[d]"></a>Table_paused</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, table.o(i.Table_paused))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Table_paused &rArr; BSP_displayPhilStat &rArr; Display96x16x1StringDraw &rArr; Display96x16x1WriteArray &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_displayPhilStat
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_displayPaused
</UL>
<BR>[Address Reference Count : 1]<UL><LI> table.o(i.Table_serving)
</UL>
<P><STRONG><a name="[b]"></a>Table_serving</STRONG> (Thumb, 410 bytes, Stack size 40 bytes, table.o(i.Table_serving))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Table_serving &rArr; BSP_displayPhilStat &rArr; Display96x16x1StringDraw &rArr; Display96x16x1WriteArray &rArr; SysCtlDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QActive_post
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Q_onAssert
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_displayPhilStat
</UL>
<BR>[Address Reference Count : 2]<UL><LI> table.o(i.Table_initial)
<LI> table.o(i.Table_paused)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
